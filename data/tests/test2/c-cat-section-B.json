{
  "id": "test2-c-cat-section-B",
  "title": "C-CAT Exam Test 2 - Section B (Intermediate Level)",
  "passingPercentage": 60,
  "correctMarks": 3,
  "incorrectMarks": 1,
  "sections": [
    {
      "id": "section-B-c-programming",
      "title": "C Programming",
      "questions": [
        {
          "id": 1,
          "text": "What will be the output of the following C code?",
          "codeSnippet": "#include <stdio.h>\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int *p = arr + 2;\n    printf(\"%d %d\", *p, *(p+1));\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "1 2" },
            { "id": "b", "text": "2 3" },
            { "id": "c", "text": "3 4" },
            { "id": "d", "text": "4 5" }
          ],
          "correctOptionId": "c",
          "type": "code_analysis"
        },
        {
          "id": 2,
          "text": "What will be the output of the following C code?",
          "codeSnippet": "#include <stdio.h>\nint main() {\n    int x = 10;\n    int *p = &x;\n    printf(\"%d %d\", x, *p);\n    *p = 20;\n    printf(\" %d %d\", x, *p);\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "10 10 10 20" },
            { "id": "b", "text": "10 10 20 20" },
            { "id": "c", "text": "10 20 20 20" },
            { "id": "d", "text": "20 20 20 20" }
          ],
          "correctOptionId": "b",
          "type": "code_analysis"
        },
        {
          "id": 3,
          "text": "What is the purpose of the 'static' keyword in C?",
          "options": [
            { "id": "a", "text": "To make variables global" },
            { "id": "b", "text": "To preserve variable value between function calls" },
            { "id": "c", "text": "To make variables constant" },
            { "id": "d", "text": "To allocate memory dynamically" }
          ],
          "correctOptionId": "b",
          "type": "concepts"
        },
        {
          "id": 4,
          "text": "What will be the output of the following C code?",
          "codeSnippet": "#include <stdio.h>\nint main() {\n    int i = 5;\n    switch(i) {\n        case 5: printf(\"Five \");\n        case 4: printf(\"Four \");\n        case 3: printf(\"Three \");\n        default: printf(\"Default\");\n    }\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "Five" },
            { "id": "b", "text": "Five Four Three Default" },
            { "id": "c", "text": "Default" },
            { "id": "d", "text": "Compilation Error" }
          ],
          "correctOptionId": "b",
          "type": "code_analysis"
        },
        {
          "id": 5,
          "text": "Which function is used to allocate memory dynamically in C?",
          "options": [
            { "id": "a", "text": "alloc()" },
            { "id": "b", "text": "malloc()" },
            { "id": "c", "text": "calloc()" },
            { "id": "d", "text": "Both b and c" }
          ],
          "correctOptionId": "d",
          "type": "memory_management"
        },
        {
          "id": 6,
          "text": "What will be the output of the following C code?",
          "codeSnippet": "#include <stdio.h>\nvoid func(int arr[]) {\n    printf(\"%lu\", sizeof(arr));\n}\nint main() {\n    int arr[10];\n    func(arr);\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "40" },
            { "id": "b", "text": "8" },
            { "id": "c", "text": "10" },
            { "id": "d", "text": "4" }
          ],
          "correctOptionId": "b",
          "type": "code_analysis"
        },
        {
          "id": 7,
          "text": "What is the difference between '++i' and 'i++'?",
          "options": [
            { "id": "a", "text": "No difference" },
            { "id": "b", "text": "++i increments before use, i++ increments after use" },
            { "id": "c", "text": "++i is faster than i++" },
            { "id": "d", "text": "i++ is faster than ++i" }
          ],
          "correctOptionId": "b",
          "type": "operators"
        },
        {
          "id": 8,
          "text": "What will be the output of the following C code?",
          "codeSnippet": "#include <stdio.h>\nint main() {\n    char str[] = \"Hello\";\n    char *p = str;\n    printf(\"%c %c\", str[0], *p);\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "H H" },
            { "id": "b", "text": "e e" },
            { "id": "c", "text": "l l" },
            { "id": "d", "text": "o o" }
          ],
          "correctOptionId": "a",
          "type": "code_analysis"
        },
        {
          "id": 9,
          "text": "Which header file contains the declaration of malloc() function?",
          "options": [
            { "id": "a", "text": "stdio.h" },
            { "id": "b", "text": "stdlib.h" },
            { "id": "c", "text": "string.h" },
            { "id": "d", "text": "malloc.h" }
          ],
          "correctOptionId": "b",
          "type": "header_files"
        },
        {
          "id": 10,
          "text": "What will be the output of the following C code?",
          "codeSnippet": "#include <stdio.h>\n#define SQUARE(x) x*x\nint main() {\n    int result = SQUARE(3+2);\n    printf(\"%d\", result);\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "25" },
            { "id": "b", "text": "11" },
            { "id": "c", "text": "9" },
            { "id": "d", "text": "7" }
          ],
          "correctOptionId": "b",
          "type": "preprocessor"
        }
      ]
    },
    {
      "id": "section-B-data-structures",
      "title": "Data Structures",
      "questions": [
        {
          "id": 11,
          "text": "What is the time complexity of inserting an element at the beginning of a linked list?",
          "options": [
            { "id": "a", "text": "O(1)" },
            { "id": "b", "text": "O(n)" },
            { "id": "c", "text": "O(log n)" },
            { "id": "d", "text": "O(n²)" }
          ],
          "correctOptionId": "a",
          "type": "time_complexity"
        },
        {
          "id": 12,
          "text": "Which data structure is used to implement recursion?",
          "options": [
            { "id": "a", "text": "Queue" },
            { "id": "b", "text": "Stack" },
            { "id": "c", "text": "Array" },
            { "id": "d", "text": "Tree" }
          ],
          "correctOptionId": "b",
          "type": "concepts"
        },
        {
          "id": 13,
          "text": "What is the maximum number of nodes at level k in a binary tree?",
          "options": [
            { "id": "a", "text": "2^k" },
            { "id": "b", "text": "2^(k-1)" },
            { "id": "c", "text": "2^(k+1)" },
            { "id": "d", "text": "k²" }
          ],
          "correctOptionId": "a",
          "type": "binary_tree"
        },
        {
          "id": 14,
          "text": "Which traversal of a binary tree gives nodes in sorted order for a Binary Search Tree?",
          "options": [
            { "id": "a", "text": "Preorder" },
            { "id": "b", "text": "Postorder" },
            { "id": "c", "text": "Inorder" },
            { "id": "d", "text": "Level order" }
          ],
          "correctOptionId": "c",
          "type": "tree_traversal"
        },
        {
          "id": 15,
          "text": "What is the worst-case time complexity of Quick Sort?",
          "options": [
            { "id": "a", "text": "O(n log n)" },
            { "id": "b", "text": "O(n²)" },
            { "id": "c", "text": "O(n)" },
            { "id": "d", "text": "O(log n)" }
          ],
          "correctOptionId": "b",
          "type": "sorting_algorithms"
        },
        {
          "id": 16,
          "text": "Which data structure would be most efficient for implementing a priority queue?",
          "options": [
            { "id": "a", "text": "Array" },
            { "id": "b", "text": "Linked List" },
            { "id": "c", "text": "Heap" },
            { "id": "d", "text": "Stack" }
          ],
          "correctOptionId": "c",
          "type": "concepts"
        },
        {
          "id": 17,
          "text": "What is the space complexity of merge sort?",
          "options": [
            { "id": "a", "text": "O(1)" },
            { "id": "b", "text": "O(log n)" },
            { "id": "c", "text": "O(n)" },
            { "id": "d", "text": "O(n²)" }
          ],
          "correctOptionId": "c",
          "type": "space_complexity"
        },
        {
          "id": 18,
          "text": "In which scenario would you prefer a circular queue over a linear queue?",
          "options": [
            { "id": "a", "text": "When memory is limited" },
            { "id": "b", "text": "When we need to reuse memory efficiently" },
            { "id": "c", "text": "When implementing LIFO operations" },
            { "id": "d", "text": "When sorting is required" }
          ],
          "correctOptionId": "b",
          "type": "concepts"
        },
        {
          "id": 19,
          "text": "What is the height of a complete binary tree with n nodes?",
          "options": [
            { "id": "a", "text": "log₂(n)" },
            { "id": "b", "text": "⌊log₂(n)⌋" },
            { "id": "c", "text": "⌈log₂(n+1)⌉ - 1" },
            { "id": "d", "text": "n - 1" }
          ],
          "correctOptionId": "c",
          "type": "binary_tree"
        },
        {
          "id": 20,
          "text": "Which operation is NOT efficient in a hash table with chaining?",
          "options": [
            { "id": "a", "text": "Insertion" },
            { "id": "b", "text": "Deletion" },
            { "id": "c", "text": "Search" },
            { "id": "d", "text": "Finding minimum element" }
          ],
          "correctOptionId": "d",
          "type": "hashing"
        }
      ]
    },
    {
      "id": "section-B-cpp-oop",
      "title": "Object Oriented Programming Concepts using C++",
      "questions": [
        {
          "id": 21,
          "text": "What will be the output of the following C++ code?",
          "codeSnippet": "#include <iostream>\nusing namespace std;\nclass Base {\npublic:\n    virtual void show() { cout << \"Base \"; }\n};\nclass Derived : public Base {\npublic:\n    void show() { cout << \"Derived \"; }\n};\nint main() {\n    Base *b = new Derived();\n    b->show();\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "Base" },
            { "id": "b", "text": "Derived" },
            { "id": "c", "text": "Compilation Error" },
            { "id": "d", "text": "Runtime Error" }
          ],
          "correctOptionId": "b",
          "type": "polymorphism"
        },
        {
          "id": 22,
          "text": "Which of the following is NOT a pillar of Object-Oriented Programming?",
          "options": [
            { "id": "a", "text": "Encapsulation" },
            { "id": "b", "text": "Inheritance" },
            { "id": "c", "text": "Polymorphism" },
            { "id": "d", "text": "Compilation" }
          ],
          "correctOptionId": "d",
          "type": "oop_concepts"
        },
        {
          "id": 23,
          "text": "What is the purpose of a constructor in C++?",
          "options": [
            { "id": "a", "text": "To destroy objects" },
            { "id": "b", "text": "To initialize objects" },
            { "id": "c", "text": "To copy objects" },
            { "id": "d", "text": "To compare objects" }
          ],
          "correctOptionId": "b",
          "type": "constructor_destructor"
        },
        {
          "id": 24,
          "text": "What will be the output of the following C++ code?",
          "codeSnippet": "#include <iostream>\nusing namespace std;\nclass Test {\npublic:\n    Test() { cout << \"Constructor \"; }\n    ~Test() { cout << \"Destructor \"; }\n};\nint main() {\n    Test t;\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "Constructor" },
            { "id": "b", "text": "Destructor" },
            { "id": "c", "text": "Constructor Destructor" },
            { "id": "d", "text": "No output" }
          ],
          "correctOptionId": "c",
          "type": "constructor_destructor"
        },
        {
          "id": 25,
          "text": "Which type of inheritance is demonstrated in the following code?",
          "codeSnippet": "class A { };\nclass B : public A { };\nclass C : public A { };\nclass D : public B, public C { };",
          "options": [
            { "id": "a", "text": "Single Inheritance" },
            { "id": "b", "text": "Multiple Inheritance" },
            { "id": "c", "text": "Multilevel Inheritance" },
            { "id": "d", "text": "Diamond Inheritance" }
          ],
          "correctOptionId": "d",
          "type": "inheritance"
        },
        {
          "id": 26,
          "text": "What is function overloading in C++?",
          "options": [
            {
              "id": "a",
              "text": "Having multiple functions with the same name but different parameters"
            },
            { "id": "b", "text": "Redefining a function in derived class" },
            { "id": "c", "text": "Using virtual functions" },
            { "id": "d", "text": "Using static functions" }
          ],
          "correctOptionId": "a",
          "type": "function_overloading"
        },
        {
          "id": 27,
          "text": "What is the difference between public, private, and protected access specifiers?",
          "options": [
            { "id": "a", "text": "No difference" },
            { "id": "b", "text": "They control the visibility of class members" },
            { "id": "c", "text": "They control the size of class" },
            { "id": "d", "text": "They control the speed of execution" }
          ],
          "correctOptionId": "b",
          "type": "access_specifiers"
        },
        {
          "id": 28,
          "text": "What will be the output of the following C++ code?",
          "codeSnippet": "#include <iostream>\nusing namespace std;\nclass Test {\nprivate:\n    int x;\npublic:\n    Test(int a = 10) : x(a) { }\n    void display() { cout << x; }\n};\nint main() {\n    Test t;\n    t.display();\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "0" },
            { "id": "b", "text": "10" },
            { "id": "c", "text": "Compilation Error" },
            { "id": "d", "text": "Garbage value" }
          ],
          "correctOptionId": "b",
          "type": "default_constructor"
        },
        {
          "id": 29,
          "text": "What is operator overloading in C++?",
          "options": [
            { "id": "a", "text": "Creating new operators" },
            { "id": "b", "text": "Giving additional meaning to existing operators" },
            { "id": "c", "text": "Removing operators" },
            { "id": "d", "text": "Using operators in functions" }
          ],
          "correctOptionId": "b",
          "type": "operator_overloading"
        },
        {
          "id": 30,
          "text": "Which keyword is used to prevent inheritance in C++?",
          "options": [
            { "id": "a", "text": "static" },
            { "id": "b", "text": "const" },
            { "id": "c", "text": "final" },
            { "id": "d", "text": "sealed" }
          ],
          "correctOptionId": "c",
          "type": "inheritance"
        }
      ]
    },
    {
      "id": "section-B-operating-systems",
      "title": "Operating Systems & Networking",
      "questions": [
        {
          "id": 31,
          "text": "What is the main purpose of an operating system?",
          "options": [
            { "id": "a", "text": "To compile programs" },
            { "id": "b", "text": "To manage computer resources" },
            { "id": "c", "text": "To create applications" },
            { "id": "d", "text": "To design hardware" }
          ],
          "correctOptionId": "b",
          "type": "os_concepts"
        },
        {
          "id": 32,
          "text": "Which scheduling algorithm gives the minimum average waiting time?",
          "options": [
            { "id": "a", "text": "FCFS (First Come First Serve)" },
            { "id": "b", "text": "SJF (Shortest Job First)" },
            { "id": "c", "text": "Round Robin" },
            { "id": "d", "text": "Priority Scheduling" }
          ],
          "correctOptionId": "b",
          "type": "process_scheduling"
        },
        {
          "id": 33,
          "text": "What is a deadlock in operating systems?",
          "options": [
            { "id": "a", "text": "When a process takes too much time" },
            {
              "id": "b",
              "text": "When processes wait indefinitely for resources held by each other"
            },
            { "id": "c", "text": "When the system crashes" },
            { "id": "d", "text": "When memory is full" }
          ],
          "correctOptionId": "b",
          "type": "deadlock"
        },
        {
          "id": 34,
          "text": "Which layer of the OSI model is responsible for routing?",
          "options": [
            { "id": "a", "text": "Physical Layer" },
            { "id": "b", "text": "Data Link Layer" },
            { "id": "c", "text": "Network Layer" },
            { "id": "d", "text": "Transport Layer" }
          ],
          "correctOptionId": "c",
          "type": "networking"
        },
        {
          "id": 35,
          "text": "What is the difference between paging and segmentation?",
          "options": [
            { "id": "a", "text": "No difference" },
            {
              "id": "b",
              "text": "Paging divides memory into fixed-size blocks, segmentation into variable-size blocks"
            },
            { "id": "c", "text": "Paging is faster than segmentation" },
            { "id": "d", "text": "Segmentation is used only in Windows" }
          ],
          "correctOptionId": "b",
          "type": "memory_management"
        },
        {
          "id": 36,
          "text": "Which protocol is used for reliable data transmission?",
          "options": [
            { "id": "a", "text": "UDP" },
            { "id": "b", "text": "TCP" },
            { "id": "c", "text": "IP" },
            { "id": "d", "text": "ICMP" }
          ],
          "correctOptionId": "b",
          "type": "networking"
        },
        {
          "id": 37,
          "text": "What is the purpose of a semaphore in operating systems?",
          "options": [
            { "id": "a", "text": "To schedule processes" },
            { "id": "b", "text": "To synchronize processes" },
            { "id": "c", "text": "To allocate memory" },
            { "id": "d", "text": "To manage files" }
          ],
          "correctOptionId": "b",
          "type": "synchronization"
        },
        {
          "id": 38,
          "text": "What is thrashing in operating systems?",
          "options": [
            { "id": "a", "text": "High CPU utilization" },
            { "id": "b", "text": "Excessive paging activity leading to low CPU utilization" },
            { "id": "c", "text": "System shutdown" },
            { "id": "d", "text": "Memory corruption" }
          ],
          "correctOptionId": "b",
          "type": "virtual_memory"
        },
        {
          "id": 39,
          "text": "Which port number is used by HTTP?",
          "options": [
            { "id": "a", "text": "21" },
            { "id": "b", "text": "22" },
            { "id": "c", "text": "80" },
            { "id": "d", "text": "443" }
          ],
          "correctOptionId": "c",
          "type": "networking"
        },
        {
          "id": 40,
          "text": "What is the banker's algorithm used for?",
          "options": [
            { "id": "a", "text": "Process scheduling" },
            { "id": "b", "text": "Deadlock avoidance" },
            { "id": "c", "text": "Memory allocation" },
            { "id": "d", "text": "File management" }
          ],
          "correctOptionId": "b",
          "type": "deadlock"
        }
      ]
    },
    {
      "id": "section-B-big-data-ai",
      "title": "Basics of Big Data & Artificial Intelligence",
      "questions": [
        {
          "id": 41,
          "text": "What are the 3 V's of Big Data?",
          "options": [
            { "id": "a", "text": "Volume, Velocity, Variety" },
            { "id": "b", "text": "Volume, Value, Velocity" },
            { "id": "c", "text": "Variety, Value, Verification" },
            { "id": "d", "text": "Volume, Verification, Velocity" }
          ],
          "correctOptionId": "a",
          "type": "big_data_concepts"
        },
        {
          "id": 42,
          "text": "Which of the following is a distributed computing framework for processing big data?",
          "options": [
            { "id": "a", "text": "MySQL" },
            { "id": "b", "text": "Apache Hadoop" },
            { "id": "c", "text": "Microsoft Excel" },
            { "id": "d", "text": "Oracle Database" }
          ],
          "correctOptionId": "b",
          "type": "big_data_tools"
        },
        {
          "id": 43,
          "text": "What is Machine Learning?",
          "options": [
            { "id": "a", "text": "A type of database" },
            { "id": "b", "text": "A subset of AI that enables systems to learn from data" },
            { "id": "c", "text": "A programming language" },
            { "id": "d", "text": "A web framework" }
          ],
          "correctOptionId": "b",
          "type": "ai_concepts"
        },
        {
          "id": 44,
          "text": "Which type of learning uses labeled training data?",
          "options": [
            { "id": "a", "text": "Supervised Learning" },
            { "id": "b", "text": "Unsupervised Learning" },
            { "id": "c", "text": "Reinforcement Learning" },
            { "id": "d", "text": "Deep Learning" }
          ],
          "correctOptionId": "a",
          "type": "machine_learning"
        },
        {
          "id": 45,
          "text": "What is HDFS in Hadoop ecosystem?",
          "options": [
            { "id": "a", "text": "Hadoop Database File System" },
            { "id": "b", "text": "Hadoop Distributed File System" },
            { "id": "c", "text": "Hadoop Data Flow System" },
            { "id": "d", "text": "Hadoop Dynamic File System" }
          ],
          "correctOptionId": "b",
          "type": "big_data_tools"
        },
        {
          "id": 46,
          "text": "Which algorithm is commonly used for classification problems?",
          "options": [
            { "id": "a", "text": "K-Means" },
            { "id": "b", "text": "Decision Tree" },
            { "id": "c", "text": "DBSCAN" },
            { "id": "d", "text": "PCA" }
          ],
          "correctOptionId": "b",
          "type": "machine_learning"
        },
        {
          "id": 47,
          "text": "What is the primary goal of unsupervised learning?",
          "options": [
            { "id": "a", "text": "To predict future values" },
            { "id": "b", "text": "To classify data into categories" },
            { "id": "c", "text": "To find hidden patterns in data" },
            { "id": "d", "text": "To optimize rewards" }
          ],
          "correctOptionId": "c",
          "type": "machine_learning"
        },
        {
          "id": 48,
          "text": "Which of the following is a NoSQL database commonly used for big data?",
          "options": [
            { "id": "a", "text": "MySQL" },
            { "id": "b", "text": "PostgreSQL" },
            { "id": "c", "text": "MongoDB" },
            { "id": "d", "text": "Oracle" }
          ],
          "correctOptionId": "c",
          "type": "big_data_tools"
        },
        {
          "id": 49,
          "text": "What is Deep Learning?",
          "options": [
            { "id": "a", "text": "Learning from very large datasets" },
            { "id": "b", "text": "Machine learning using neural networks with multiple layers" },
            { "id": "c", "text": "Learning from unstructured data only" },
            { "id": "d", "text": "A type of database query" }
          ],
          "correctOptionId": "b",
          "type": "ai_concepts"
        },
        {
          "id": 50,
          "text": "What is the MapReduce programming model used for?",
          "options": [
            { "id": "a", "text": "Web development" },
            {
              "id": "b",
              "text": "Processing large datasets in parallel across distributed systems"
            },
            { "id": "c", "text": "Creating mobile applications" },
            { "id": "d", "text": "Database management" }
          ],
          "correctOptionId": "b",
          "type": "big_data_concepts"
        }
      ]
    }
  ]
}
