{
  "id": "test4-c-cat-section-B",
  "title": "C-CAT Exam Test 4 - Section B (Intermediate)",
  "passingPercentage": 50,
  "correctMarks": 3,
  "incorrectMarks": 1,
  "sections": [
    {
      "id": "section-B-c-programming",
      "title": "C Programming",
      "questions": [
        {
          "id": 1,
          "text": "What will be the output of the following C code?",
          "codeSnippet": "#include <stdio.h>\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int *ptr = arr + 2;\n    printf(\"%d %d\", *ptr, *(ptr + 1));\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "1 2" },
            { "id": "b", "text": "2 3" },
            { "id": "c", "text": "3 4" },
            { "id": "d", "text": "4 5" }
          ],
          "correctOptionId": "c",
          "type": "code_analysis"
        },
        {
          "id": 2,
          "text": "Which of the following correctly allocates memory for an array of 10 integers?",
          "options": [
            { "id": "a", "text": "int *arr = malloc(10);" },
            { "id": "b", "text": "int *arr = malloc(10 * sizeof(int));" },
            { "id": "c", "text": "int *arr = calloc(10);" },
            { "id": "d", "text": "int *arr = alloc(10 * sizeof(int));" }
          ],
          "correctOptionId": "b",
          "type": "memory_management"
        },
        {
          "id": 3,
          "text": "What is the output of the following code?",
          "codeSnippet": "#include <stdio.h>\nint main() {\n    char str[] = \"Hello\";\n    printf(\"%d\", sizeof(str));\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "5" },
            { "id": "b", "text": "6" },
            { "id": "c", "text": "4" },
            { "id": "d", "text": "Compilation error" }
          ],
          "correctOptionId": "b",
          "type": "string_operations"
        },
        {
          "id": 4,
          "text": "Which storage class is used to retain the value of a variable between function calls?",
          "options": [
            { "id": "a", "text": "auto" },
            { "id": "b", "text": "register" },
            { "id": "c", "text": "static" },
            { "id": "d", "text": "extern" }
          ],
          "correctOptionId": "c",
          "type": "storage_classes"
        },
        {
          "id": 5,
          "text": "What will be the output?",
          "codeSnippet": "#include <stdio.h>\nint main() {\n    int x = 5;\n    int y = ++x + x++;\n    printf(\"%d %d\", x, y);\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "7 12" },
            { "id": "b", "text": "7 11" },
            { "id": "c", "text": "6 11" },
            { "id": "d", "text": "Undefined behavior" }
          ],
          "correctOptionId": "d",
          "type": "operator_precedence"
        },
        {
          "id": 6,
          "text": "Which function is used to compare two strings in C?",
          "options": [
            { "id": "a", "text": "strcpy()" },
            { "id": "b", "text": "strcmp()" },
            { "id": "c", "text": "strlen()" },
            { "id": "d", "text": "strcat()" }
          ],
          "correctOptionId": "b",
          "type": "string_functions"
        },
        {
          "id": 7,
          "text": "What is the purpose of the 'const' keyword when used with pointers?",
          "codeSnippet": "const int *ptr;",
          "options": [
            { "id": "a", "text": "The pointer cannot be changed" },
            { "id": "b", "text": "The value pointed to cannot be changed" },
            { "id": "c", "text": "Both pointer and value are constant" },
            { "id": "d", "text": "No effect" }
          ],
          "correctOptionId": "b",
          "type": "pointer_concepts"
        },
        {
          "id": 8,
          "text": "What will be the output?",
          "codeSnippet": "#include <stdio.h>\nint main() {\n    int arr[3][3] = {{1,2,3}, {4,5,6}, {7,8,9}};\n    printf(\"%d\", *(*(arr+1)+2));\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "3" },
            { "id": "b", "text": "6" },
            { "id": "c", "text": "8" },
            { "id": "d", "text": "9" }
          ],
          "correctOptionId": "b",
          "type": "multidimensional_arrays"
        },
        {
          "id": 9,
          "text": "Which of the following is correct about function pointers in C?",
          "options": [
            { "id": "a", "text": "Function pointers can only point to void functions" },
            { "id": "b", "text": "Function pointers cannot be passed as arguments" },
            { "id": "c", "text": "Function pointers can be used to implement callback functions" },
            { "id": "d", "text": "Function pointers cannot be stored in arrays" }
          ],
          "correctOptionId": "c",
          "type": "function_pointers"
        },
        {
          "id": 10,
          "text": "What is the difference between malloc() and calloc()?",
          "options": [
            { "id": "a", "text": "malloc initializes memory to zero, calloc doesn't" },
            { "id": "b", "text": "calloc initializes memory to zero, malloc doesn't" },
            { "id": "c", "text": "No difference" },
            { "id": "d", "text": "malloc is faster than calloc" }
          ],
          "correctOptionId": "b",
          "type": "memory_allocation"
        }
      ]
    },
    {
      "id": "section-B-data-structures",
      "title": "Data Structures",
      "questions": [
        {
          "id": 11,
          "text": "What is the time complexity of searching an element in a balanced binary search tree?",
          "options": [
            { "id": "a", "text": "O(1)" },
            { "id": "b", "text": "O(n)" },
            { "id": "c", "text": "O(log n)" },
            { "id": "d", "text": "O(n log n)" }
          ],
          "correctOptionId": "c",
          "type": "tree_complexity"
        },
        {
          "id": 12,
          "text": "Which data structure follows the LIFO (Last In First Out) principle?",
          "options": [
            { "id": "a", "text": "Queue" },
            { "id": "b", "text": "Stack" },
            { "id": "c", "text": "Linked List" },
            { "id": "d", "text": "Array" }
          ],
          "correctOptionId": "b",
          "type": "basic_concepts"
        },
        {
          "id": 13,
          "text": "In a hash table with separate chaining, what happens when two keys hash to the same index?",
          "options": [
            { "id": "a", "text": "One key is rejected" },
            { "id": "b", "text": "Keys are stored in a linked list at that index" },
            { "id": "c", "text": "The table size is doubled" },
            { "id": "d", "text": "Linear probing is used" }
          ],
          "correctOptionId": "b",
          "type": "hashing"
        },
        {
          "id": 14,
          "text": "What is the worst-case time complexity of insertion sort?",
          "options": [
            { "id": "a", "text": "O(n)" },
            { "id": "b", "text": "O(n log n)" },
            { "id": "c", "text": "O(nÂ²)" },
            { "id": "d", "text": "O(log n)" }
          ],
          "correctOptionId": "c",
          "type": "sorting_algorithms"
        },
        {
          "id": 15,
          "text": "Which traversal of a binary tree visits nodes in the order: left subtree, root, right subtree?",
          "options": [
            { "id": "a", "text": "Preorder" },
            { "id": "b", "text": "Inorder" },
            { "id": "c", "text": "Postorder" },
            { "id": "d", "text": "Level order" }
          ],
          "correctOptionId": "b",
          "type": "tree_traversal"
        },
        {
          "id": 16,
          "text": "What is a complete binary tree?",
          "options": [
            { "id": "a", "text": "A tree where all leaves are at the same level" },
            {
              "id": "b",
              "text": "A tree where all levels are filled except possibly the last, which is filled from left to right"
            },
            { "id": "c", "text": "A tree where each node has exactly two children" },
            { "id": "d", "text": "A tree with maximum height" }
          ],
          "correctOptionId": "b",
          "type": "tree_types"
        },
        {
          "id": 17,
          "text": "Which operation is NOT typically performed on a queue?",
          "options": [
            { "id": "a", "text": "Enqueue" },
            { "id": "b", "text": "Dequeue" },
            { "id": "c", "text": "Push" },
            { "id": "d", "text": "Front" }
          ],
          "correctOptionId": "c",
          "type": "queue_operations"
        },
        {
          "id": 18,
          "text": "What is the space complexity of merge sort?",
          "options": [
            { "id": "a", "text": "O(1)" },
            { "id": "b", "text": "O(log n)" },
            { "id": "c", "text": "O(n)" },
            { "id": "d", "text": "O(n log n)" }
          ],
          "correctOptionId": "c",
          "type": "algorithm_complexity"
        },
        {
          "id": 19,
          "text": "In a doubly linked list, what advantage does it have over a singly linked list?",
          "options": [
            { "id": "a", "text": "Less memory usage" },
            { "id": "b", "text": "Faster insertion at beginning" },
            { "id": "c", "text": "Can traverse in both directions" },
            { "id": "d", "text": "Better cache performance" }
          ],
          "correctOptionId": "c",
          "type": "linked_list_types"
        },
        {
          "id": 20,
          "text": "What is the primary advantage of using a heap data structure?",
          "options": [
            { "id": "a", "text": "Fast search operations" },
            { "id": "b", "text": "Efficient priority queue implementation" },
            { "id": "c", "text": "Memory efficient storage" },
            { "id": "d", "text": "Maintains sorted order" }
          ],
          "correctOptionId": "b",
          "type": "heap_properties"
        }
      ]
    },
    {
      "id": "section-B-oop-cpp",
      "title": "Object Oriented Programming using C++",
      "questions": [
        {
          "id": 21,
          "text": "What will be the output of the following C++ code?",
          "codeSnippet": "#include <iostream>\nusing namespace std;\nclass Base {\npublic:\n    virtual void show() { cout << \"Base \"; }\n};\nclass Derived : public Base {\npublic:\n    void show() { cout << \"Derived \"; }\n};\nint main() {\n    Base *ptr = new Derived();\n    ptr->show();\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "Base" },
            { "id": "b", "text": "Derived" },
            { "id": "c", "text": "Compilation error" },
            { "id": "d", "text": "Runtime error" }
          ],
          "correctOptionId": "b",
          "type": "polymorphism"
        },
        {
          "id": 22,
          "text": "Which of the following is NOT a principle of Object-Oriented Programming?",
          "options": [
            { "id": "a", "text": "Encapsulation" },
            { "id": "b", "text": "Inheritance" },
            { "id": "c", "text": "Polymorphism" },
            { "id": "d", "text": "Compilation" }
          ],
          "correctOptionId": "d",
          "type": "oop_principles"
        },
        {
          "id": 23,
          "text": "What is the purpose of a copy constructor in C++?",
          "options": [
            { "id": "a", "text": "To create a new object" },
            { "id": "b", "text": "To initialize an object with another object of the same class" },
            { "id": "c", "text": "To delete an object" },
            { "id": "d", "text": "To convert between data types" }
          ],
          "correctOptionId": "b",
          "type": "constructors"
        },
        {
          "id": 24,
          "text": "What is function overloading in C++?",
          "options": [
            {
              "id": "a",
              "text": "Having multiple functions with the same name but different parameters"
            },
            { "id": "b", "text": "Having one function that can handle multiple data types" },
            { "id": "c", "text": "Calling a function multiple times" },
            { "id": "d", "text": "Creating a function inside another function" }
          ],
          "correctOptionId": "a",
          "type": "function_overloading"
        },
        {
          "id": 25,
          "text": "Which access specifier allows access from derived classes but not from outside the class?",
          "options": [
            { "id": "a", "text": "public" },
            { "id": "b", "text": "private" },
            { "id": "c", "text": "protected" },
            { "id": "d", "text": "static" }
          ],
          "correctOptionId": "c",
          "type": "access_specifiers"
        },
        {
          "id": 26,
          "text": "What is the difference between method overloading and method overriding?",
          "options": [
            { "id": "a", "text": "Overloading is compile-time, overriding is runtime" },
            { "id": "b", "text": "Overloading is runtime, overriding is compile-time" },
            { "id": "c", "text": "Both are compile-time" },
            { "id": "d", "text": "Both are runtime" }
          ],
          "correctOptionId": "a",
          "type": "polymorphism_types"
        },
        {
          "id": 27,
          "text": "What will happen if a class has a pure virtual function?",
          "options": [
            { "id": "a", "text": "The class becomes abstract" },
            { "id": "b", "text": "The class cannot be inherited" },
            { "id": "c", "text": "The function must be private" },
            { "id": "d", "text": "Compilation error" }
          ],
          "correctOptionId": "a",
          "type": "abstract_classes"
        },
        {
          "id": 28,
          "text": "What is the 'this' pointer in C++?",
          "options": [
            { "id": "a", "text": "A pointer to the base class" },
            { "id": "b", "text": "A pointer to the current object" },
            { "id": "c", "text": "A pointer to the derived class" },
            { "id": "d", "text": "A pointer to the parent function" }
          ],
          "correctOptionId": "b",
          "type": "this_pointer"
        },
        {
          "id": 29,
          "text": "Which type of inheritance is NOT supported in C++?",
          "options": [
            { "id": "a", "text": "Single inheritance" },
            { "id": "b", "text": "Multiple inheritance" },
            { "id": "c", "text": "Multilevel inheritance" },
            { "id": "d", "text": "Circular inheritance" }
          ],
          "correctOptionId": "d",
          "type": "inheritance_types"
        },
        {
          "id": 30,
          "text": "What is operator overloading in C++?",
          "options": [
            { "id": "a", "text": "Using the same operator with different operands" },
            { "id": "b", "text": "Defining custom behavior for operators on user-defined types" },
            { "id": "c", "text": "Creating multiple operators with the same symbol" },
            { "id": "d", "text": "Loading operators from external libraries" }
          ],
          "correctOptionId": "b",
          "type": "operator_overloading"
        }
      ]
    },
    {
      "id": "section-B-os-networking",
      "title": "Operating Systems & Networking",
      "questions": [
        {
          "id": 31,
          "text": "What is a deadlock in operating systems?",
          "options": [
            { "id": "a", "text": "When a process terminates unexpectedly" },
            {
              "id": "b",
              "text": "When two or more processes are blocked forever, waiting for each other"
            },
            { "id": "c", "text": "When the system runs out of memory" },
            { "id": "d", "text": "When a process enters an infinite loop" }
          ],
          "correctOptionId": "b",
          "type": "process_management"
        },
        {
          "id": 32,
          "text": "Which scheduling algorithm provides the shortest average waiting time?",
          "options": [
            { "id": "a", "text": "FCFS (First Come First Serve)" },
            { "id": "b", "text": "SJF (Shortest Job First)" },
            { "id": "c", "text": "Round Robin" },
            { "id": "d", "text": "Priority Scheduling" }
          ],
          "correctOptionId": "b",
          "type": "scheduling_algorithms"
        },
        {
          "id": 33,
          "text": "What is virtual memory?",
          "options": [
            { "id": "a", "text": "Memory that doesn't exist physically" },
            {
              "id": "b",
              "text": "A technique that allows execution of processes larger than physical memory"
            },
            { "id": "c", "text": "Memory used by virtual machines" },
            { "id": "d", "text": "Temporary memory storage" }
          ],
          "correctOptionId": "b",
          "type": "memory_management"
        },
        {
          "id": 34,
          "text": "Which layer of the OSI model is responsible for routing?",
          "options": [
            { "id": "a", "text": "Physical Layer" },
            { "id": "b", "text": "Data Link Layer" },
            { "id": "c", "text": "Network Layer" },
            { "id": "d", "text": "Transport Layer" }
          ],
          "correctOptionId": "c",
          "type": "osi_model"
        },
        {
          "id": 35,
          "text": "What is the purpose of a semaphore in operating systems?",
          "options": [
            { "id": "a", "text": "To store data permanently" },
            { "id": "b", "text": "To synchronize access to shared resources" },
            { "id": "c", "text": "To schedule processes" },
            { "id": "d", "text": "To manage memory allocation" }
          ],
          "correctOptionId": "b",
          "type": "synchronization"
        },
        {
          "id": 36,
          "text": "What is the difference between TCP and UDP?",
          "options": [
            { "id": "a", "text": "TCP is connection-oriented, UDP is connectionless" },
            { "id": "b", "text": "UDP is connection-oriented, TCP is connectionless" },
            { "id": "c", "text": "Both are connection-oriented" },
            { "id": "d", "text": "Both are connectionless" }
          ],
          "correctOptionId": "a",
          "type": "network_protocols"
        },
        {
          "id": 37,
          "text": "What is thrashing in virtual memory management?",
          "options": [
            { "id": "a", "text": "Excessive page swapping leading to poor performance" },
            { "id": "b", "text": "Memory corruption" },
            { "id": "c", "text": "Process termination" },
            { "id": "d", "text": "Cache overflow" }
          ],
          "correctOptionId": "a",
          "type": "virtual_memory"
        },
        {
          "id": 38,
          "text": "What is the purpose of DNS in networking?",
          "options": [
            { "id": "a", "text": "To encrypt data transmission" },
            { "id": "b", "text": "To translate domain names to IP addresses" },
            { "id": "c", "text": "To route packets" },
            { "id": "d", "text": "To manage network security" }
          ],
          "correctOptionId": "b",
          "type": "network_services"
        },
        {
          "id": 39,
          "text": "Which memory allocation technique suffers from external fragmentation?",
          "options": [
            { "id": "a", "text": "Fixed partitioning" },
            { "id": "b", "text": "Dynamic partitioning" },
            { "id": "c", "text": "Paging" },
            { "id": "d", "text": "Segmentation" }
          ],
          "correctOptionId": "b",
          "type": "memory_allocation"
        },
        {
          "id": 40,
          "text": "What is a subnet mask used for?",
          "options": [
            { "id": "a", "text": "To hide network addresses" },
            { "id": "b", "text": "To determine network and host portions of an IP address" },
            { "id": "c", "text": "To encrypt network traffic" },
            { "id": "d", "text": "To compress data packets" }
          ],
          "correctOptionId": "b",
          "type": "ip_addressing"
        }
      ]
    },
    {
      "id": "section-B-big-data-ai",
      "title": "Basics of Big Data & Artificial Intelligence",
      "questions": [
        {
          "id": 41,
          "text": "What are the 3 Vs that characterize Big Data?",
          "options": [
            { "id": "a", "text": "Volume, Velocity, Variety" },
            { "id": "b", "text": "Volume, Value, Verification" },
            { "id": "c", "text": "Velocity, Visualization, Validation" },
            { "id": "d", "text": "Variety, Verification, Virtualization" }
          ],
          "correctOptionId": "a",
          "type": "big_data_characteristics"
        },
        {
          "id": 42,
          "text": "Which of the following is a popular framework for distributed storage and processing of big data?",
          "options": [
            { "id": "a", "text": "MySQL" },
            { "id": "b", "text": "Hadoop" },
            { "id": "c", "text": "Oracle" },
            { "id": "d", "text": "SQLite" }
          ],
          "correctOptionId": "b",
          "type": "big_data_frameworks"
        },
        {
          "id": 43,
          "text": "What is machine learning?",
          "options": [
            { "id": "a", "text": "Programming computers to learn without human intervention" },
            { "id": "b", "text": "A subset of AI that enables computers to learn from data" },
            { "id": "c", "text": "Teaching machines to replicate human behavior exactly" },
            { "id": "d", "text": "Creating robots that can think like humans" }
          ],
          "correctOptionId": "b",
          "type": "machine_learning_basics"
        },
        {
          "id": 44,
          "text": "Which type of machine learning uses labeled training data?",
          "options": [
            { "id": "a", "text": "Supervised Learning" },
            { "id": "b", "text": "Unsupervised Learning" },
            { "id": "c", "text": "Reinforcement Learning" },
            { "id": "d", "text": "Deep Learning" }
          ],
          "correctOptionId": "a",
          "type": "ml_types"
        },
        {
          "id": 45,
          "text": "What is the primary purpose of HDFS (Hadoop Distributed File System)?",
          "options": [
            { "id": "a", "text": "To provide a user interface for Hadoop" },
            { "id": "b", "text": "To store large datasets across multiple machines" },
            { "id": "c", "text": "To process data in real-time" },
            { "id": "d", "text": "To provide security for Hadoop clusters" }
          ],
          "correctOptionId": "b",
          "type": "hadoop_components"
        },
        {
          "id": 46,
          "text": "What is an artificial neural network inspired by?",
          "options": [
            { "id": "a", "text": "Computer processors" },
            { "id": "b", "text": "The human brain" },
            { "id": "c", "text": "Mathematical algorithms" },
            { "id": "d", "text": "Database structures" }
          ],
          "correctOptionId": "b",
          "type": "neural_networks"
        },
        {
          "id": 47,
          "text": "Which of the following is an example of structured data?",
          "options": [
            { "id": "a", "text": "Social media posts" },
            { "id": "b", "text": "Images" },
            { "id": "c", "text": "Database tables" },
            { "id": "d", "text": "Audio files" }
          ],
          "correctOptionId": "c",
          "type": "data_types"
        },
        {
          "id": 48,
          "text": "What is the main advantage of NoSQL databases over traditional SQL databases for big data?",
          "options": [
            { "id": "a", "text": "Better security" },
            { "id": "b", "text": "Scalability and flexibility for unstructured data" },
            { "id": "c", "text": "Faster query processing" },
            { "id": "d", "text": "Lower cost" }
          ],
          "correctOptionId": "b",
          "type": "database_systems"
        },
        {
          "id": 49,
          "text": "What is data mining?",
          "options": [
            { "id": "a", "text": "Extracting data from databases" },
            { "id": "b", "text": "Discovering patterns and knowledge from large datasets" },
            { "id": "c", "text": "Storing data in warehouses" },
            { "id": "d", "text": "Cleaning and preprocessing data" }
          ],
          "correctOptionId": "b",
          "type": "data_mining"
        },
        {
          "id": 50,
          "text": "What is the Turing Test used to evaluate?",
          "options": [
            { "id": "a", "text": "Computer processing speed" },
            {
              "id": "b",
              "text": "Machine intelligence and ability to exhibit human-like behavior"
            },
            { "id": "c", "text": "Network security" },
            { "id": "d", "text": "Database performance" }
          ],
          "correctOptionId": "b",
          "type": "ai_evaluation"
        }
      ]
    }
  ]
}
