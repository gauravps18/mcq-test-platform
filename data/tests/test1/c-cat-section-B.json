{
  "id": "test1-c-cat-section-B",
  "title": "C-CAT Exam Test 1 - Section B",
  "passingPercentage": 50,
  "correctMarks": 3,
  "incorrectMarks": 1,
  "sections": [
    {
      "id": "section-B-c-programming",
      "title": "C Programming",
      "questions": [
        {
          "id": 1,
          "text": "What will be the output of the following C code?",
          "codeSnippet": "#include <stdio.h>\nint main() {\n    int x = 5;\n    printf(\"%d\", ++x * x++);\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "30" },
            { "id": "b", "text": "36" },
            { "id": "c", "text": "42" },
            { "id": "d", "text": "Undefined behavior" }
          ],
          "correctOptionId": "d",
          "type": "code_analysis"
        },
        {
          "id": 2,
          "text": "Which of the following is the correct way to declare a pointer to an integer in C?",
          "options": [
            { "id": "a", "text": "int ptr;" },
            { "id": "b", "text": "int *ptr;" },
            { "id": "c", "text": "int &ptr;" },
            { "id": "d", "text": "ptr int;" }
          ],
          "correctOptionId": "b",
          "type": "syntax"
        },
        {
          "id": 3,
          "text": "What is the size of 'int' data type in C on a 32-bit system?",
          "options": [
            { "id": "a", "text": "2 bytes" },
            { "id": "b", "text": "4 bytes" },
            { "id": "c", "text": "8 bytes" },
            { "id": "d", "text": "16 bytes" }
          ],
          "correctOptionId": "b",
          "type": "data_types"
        },
        {
          "id": 4,
          "text": "Which function is used to allocate memory dynamically in C?",
          "options": [
            { "id": "a", "text": "alloc()" },
            { "id": "b", "text": "malloc()" },
            { "id": "c", "text": "memory()" },
            { "id": "d", "text": "new()" }
          ],
          "correctOptionId": "b",
          "type": "memory_management"
        },
        {
          "id": 5,
          "text": "What will be the output of the following code?",
          "codeSnippet": "printf(\"%d\", sizeof(\"Hello\"));",
          "options": [
            { "id": "a", "text": "5" },
            { "id": "b", "text": "6" },
            { "id": "c", "text": "4" },
            { "id": "d", "text": "8" }
          ],
          "correctOptionId": "b",
          "type": "string_operations"
        },
        {
          "id": 6,
          "text": "Which storage class has the longest lifetime in C?",
          "options": [
            { "id": "a", "text": "auto" },
            { "id": "b", "text": "register" },
            { "id": "c", "text": "static" },
            { "id": "d", "text": "extern" }
          ],
          "correctOptionId": "c",
          "type": "storage_classes"
        },
        {
          "id": 7,
          "text": "What is the difference between ++i and i++?",
          "options": [
            { "id": "a", "text": "No difference" },
            { "id": "b", "text": "++i is pre-increment, i++ is post-increment" },
            { "id": "c", "text": "++i is faster than i++" },
            { "id": "d", "text": "++i increments by 2, i++ by 1" }
          ],
          "correctOptionId": "b",
          "type": "operators"
        },
        {
          "id": 8,
          "text": "Which header file contains the declaration of malloc() function?",
          "options": [
            { "id": "a", "text": "stdio.h" },
            { "id": "b", "text": "stdlib.h" },
            { "id": "c", "text": "string.h" },
            { "id": "d", "text": "math.h" }
          ],
          "correctOptionId": "b",
          "type": "header_files"
        },
        {
          "id": 9,
          "text": "What is the correct syntax for a function pointer in C?",
          "options": [
            { "id": "a", "text": "int *func();" },
            { "id": "b", "text": "int (*func)();" },
            { "id": "c", "text": "int func*();" },
            { "id": "d", "text": "*int func();" }
          ],
          "correctOptionId": "b",
          "type": "function_pointers"
        },
        {
          "id": 10,
          "text": "Which of the following is true about arrays in C?",
          "options": [
            { "id": "a", "text": "Array size can be changed during runtime" },
            { "id": "b", "text": "Array name represents the address of first element" },
            { "id": "c", "text": "Arrays can store different data types" },
            { "id": "d", "text": "Array indices start from 1" }
          ],
          "correctOptionId": "b",
          "type": "arrays"
        },
        {
          "id": 11,
          "text": "What does the 'const' keyword do when applied to a pointer?",
          "options": [
            { "id": "a", "text": "Makes the pointer immutable" },
            { "id": "b", "text": "Makes the pointed value immutable" },
            { "id": "c", "text": "Both A and B depending on syntax" },
            { "id": "d", "text": "Has no effect" }
          ],
          "correctOptionId": "c",
          "type": "constants"
        },
        {
          "id": 12,
          "text": "Which of the following is correct about recursion in C?",
          "options": [
            { "id": "a", "text": "Recursion is always more efficient than iteration" },
            { "id": "b", "text": "Every recursive function must have a base case" },
            { "id": "c", "text": "Recursion cannot be used with pointers" },
            { "id": "d", "text": "Recursive functions cannot return values" }
          ],
          "correctOptionId": "b",
          "type": "recursion"
        },
        {
          "id": 13,
          "text": "What will be the output of the following C code?",
          "codeSnippet": "#include <stdio.h>\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printf(\"%d\", *(arr + 3));\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "1" },
            { "id": "b", "text": "3" },
            { "id": "c", "text": "4" },
            { "id": "d", "text": "5" }
          ],
          "correctOptionId": "c",
          "type": "array_pointer_arithmetic"
        },
        {
          "id": 14,
          "text": "What is the output of this code snippet?",
          "codeSnippet": "#include <stdio.h>\nint main() {\n    char str[] = \"Programming\";\n    printf(\"%c\", str[4]);\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "r" },
            { "id": "b", "text": "a" },
            { "id": "c", "text": "m" },
            { "id": "d", "text": "g" }
          ],
          "correctOptionId": "a",
          "type": "string_indexing"
        }
      ]
    },
    {
      "id": "section-B-data-structures",
      "title": "Data Structures",
      "questions": [
        {
          "id": 15,
          "text": "Which data structure is most suitable for implementing function calls and recursion?",
          "options": [
            { "id": "a", "text": "Queue" },
            { "id": "b", "text": "Stack" },
            { "id": "c", "text": "Array" },
            { "id": "d", "text": "Linked List" }
          ],
          "correctOptionId": "b",
          "type": "stack_applications"
        },
        {
          "id": 16,
          "text": "What is the time complexity of searching an element in a balanced binary search tree?",
          "options": [
            { "id": "a", "text": "O(1)" },
            { "id": "b", "text": "O(log n)" },
            { "id": "c", "text": "O(n)" },
            { "id": "d", "text": "O(n log n)" }
          ],
          "correctOptionId": "b",
          "type": "tree_complexity"
        },
        {
          "id": 17,
          "text": "In a circular queue with n elements, how many elements can be stored?",
          "options": [
            { "id": "a", "text": "n" },
            { "id": "b", "text": "n-1" },
            { "id": "c", "text": "n+1" },
            { "id": "d", "text": "2n" }
          ],
          "correctOptionId": "b",
          "type": "queue_operations"
        },
        {
          "id": 18,
          "text": "Which traversal method visits nodes in the order: left subtree, root, right subtree?",
          "options": [
            { "id": "a", "text": "Preorder" },
            { "id": "b", "text": "Inorder" },
            { "id": "c", "text": "Postorder" },
            { "id": "d", "text": "Level order" }
          ],
          "correctOptionId": "b",
          "type": "tree_traversal"
        },
        {
          "id": 19,
          "text": "What is the worst-case time complexity of insertion sort?",
          "options": [
            { "id": "a", "text": "O(n)" },
            { "id": "b", "text": "O(n log n)" },
            { "id": "c", "text": "O(n²)" },
            { "id": "d", "text": "O(2ⁿ)" }
          ],
          "correctOptionId": "c",
          "type": "sorting_algorithms"
        },
        {
          "id": 20,
          "text": "Which data structure uses FIFO (First In First Out) principle?",
          "options": [
            { "id": "a", "text": "Stack" },
            { "id": "b", "text": "Queue" },
            { "id": "c", "text": "Array" },
            { "id": "d", "text": "Tree" }
          ],
          "correctOptionId": "b",
          "type": "queue_principle"
        },
        {
          "id": 21,
          "text": "In a hash table, what happens when two keys hash to the same location?",
          "options": [
            { "id": "a", "text": "The second key overwrites the first" },
            { "id": "b", "text": "A collision occurs and must be resolved" },
            { "id": "c", "text": "The hash function is recomputed" },
            { "id": "d", "text": "The table size is doubled" }
          ],
          "correctOptionId": "b",
          "type": "hashing"
        },
        {
          "id": 22,
          "text": "What is the space complexity of merge sort?",
          "options": [
            { "id": "a", "text": "O(1)" },
            { "id": "b", "text": "O(log n)" },
            { "id": "c", "text": "O(n)" },
            { "id": "d", "text": "O(n²)" }
          ],
          "correctOptionId": "c",
          "type": "sorting_complexity"
        },
        {
          "id": 23,
          "text": "Which operation is NOT efficiently supported by a singly linked list?",
          "options": [
            { "id": "a", "text": "Insertion at beginning" },
            { "id": "b", "text": "Deletion at beginning" },
            { "id": "c", "text": "Random access by index" },
            { "id": "d", "text": "Sequential traversal" }
          ],
          "correctOptionId": "c",
          "type": "linked_list_operations"
        },
        {
          "id": 24,
          "text": "In a complete binary tree with n nodes, what is the height?",
          "options": [
            { "id": "a", "text": "⌊log₂(n)⌋" },
            { "id": "b", "text": "⌈log₂(n+1)⌉" },
            { "id": "c", "text": "n-1" },
            { "id": "d", "text": "n/2" }
          ],
          "correctOptionId": "a",
          "type": "tree_properties"
        },
        {
          "id": 25,
          "text": "Which of the following is true about a heap?",
          "options": [
            { "id": "a", "text": "It's always a complete binary tree" },
            { "id": "b", "text": "Insertion takes O(log n) time" },
            {
              "id": "c",
              "text": "The root contains the maximum (in max-heap) or minimum (in min-heap) element"
            },
            { "id": "d", "text": "All of the above" }
          ],
          "correctOptionId": "d",
          "type": "heap_properties"
        },
        {
          "id": 26,
          "text": "What is the primary advantage of using dynamic arrays over static arrays?",
          "options": [
            { "id": "a", "text": "Faster access time" },
            { "id": "b", "text": "Better cache locality" },
            { "id": "c", "text": "Flexible size during runtime" },
            { "id": "d", "text": "Less memory usage" }
          ],
          "correctOptionId": "c",
          "type": "array_comparison"
        }
      ]
    },
    {
      "id": "section-B-oop-cpp",
      "title": "Object Oriented Programming using C++",
      "questions": [
        {
          "id": 27,
          "text": "Which of the following is NOT a pillar of Object-Oriented Programming?",
          "options": [
            { "id": "a", "text": "Encapsulation" },
            { "id": "b", "text": "Inheritance" },
            { "id": "c", "text": "Compilation" },
            { "id": "d", "text": "Polymorphism" }
          ],
          "correctOptionId": "c",
          "type": "oop_principles"
        },
        {
          "id": 28,
          "text": "What is the correct syntax to define a class in C++?",
          "options": [
            { "id": "a", "text": "class MyClass { };" },
            { "id": "b", "text": "Class MyClass { };" },
            { "id": "c", "text": "class MyClass ( );" },
            { "id": "d", "text": "define class MyClass { };" }
          ],
          "correctOptionId": "a",
          "type": "class_syntax"
        },
        {
          "id": 29,
          "text": "Which access specifier makes class members accessible only within the same class?",
          "options": [
            { "id": "a", "text": "public" },
            { "id": "b", "text": "protected" },
            { "id": "c", "text": "private" },
            { "id": "d", "text": "internal" }
          ],
          "correctOptionId": "c",
          "type": "access_specifiers"
        },
        {
          "id": 30,
          "text": "What is a constructor in C++?",
          "options": [
            { "id": "a", "text": "A function that destroys objects" },
            { "id": "b", "text": "A special function called when an object is created" },
            { "id": "c", "text": "A function that copies objects" },
            { "id": "d", "text": "A function that compares objects" }
          ],
          "correctOptionId": "b",
          "type": "constructors"
        },
        {
          "id": 31,
          "text": "Which type of inheritance allows a class to inherit from multiple base classes?",
          "options": [
            { "id": "a", "text": "Single inheritance" },
            { "id": "b", "text": "Multiple inheritance" },
            { "id": "c", "text": "Multilevel inheritance" },
            { "id": "d", "text": "Hierarchical inheritance" }
          ],
          "correctOptionId": "b",
          "type": "inheritance_types"
        },
        {
          "id": 32,
          "text": "What is function overloading in C++?",
          "options": [
            {
              "id": "a",
              "text": "Defining multiple functions with the same name but different parameters"
            },
            { "id": "b", "text": "Redefining a function in a derived class" },
            { "id": "c", "text": "Calling a function multiple times" },
            { "id": "d", "text": "Creating recursive functions" }
          ],
          "correctOptionId": "a",
          "type": "function_overloading"
        },
        {
          "id": 33,
          "text": "Which keyword is used to achieve runtime polymorphism in C++?",
          "options": [
            { "id": "a", "text": "static" },
            { "id": "b", "text": "virtual" },
            { "id": "c", "text": "const" },
            { "id": "d", "text": "inline" }
          ],
          "correctOptionId": "b",
          "type": "polymorphism"
        },
        {
          "id": 34,
          "text": "What is the purpose of a destructor in C++?",
          "options": [
            { "id": "a", "text": "To create objects" },
            { "id": "b", "text": "To initialize objects" },
            { "id": "c", "text": "To clean up resources when an object goes out of scope" },
            { "id": "d", "text": "To copy objects" }
          ],
          "correctOptionId": "c",
          "type": "destructors"
        },
        {
          "id": 35,
          "text": "Which operator is used to access members of a class through a pointer?",
          "options": [
            { "id": "a", "text": "." },
            { "id": "b", "text": "->" },
            { "id": "c", "text": "::" },
            { "id": "d", "text": "&" }
          ],
          "correctOptionId": "b",
          "type": "operators"
        },
        {
          "id": 36,
          "text": "What is method overriding in C++?",
          "options": [
            { "id": "a", "text": "Defining multiple methods with the same name in the same class" },
            { "id": "b", "text": "Redefining a base class method in a derived class" },
            { "id": "c", "text": "Calling a method multiple times" },
            { "id": "d", "text": "Creating static methods" }
          ],
          "correctOptionId": "b",
          "type": "method_overriding"
        },
        {
          "id": 37,
          "text": "Which of the following is true about abstract classes in C++?",
          "options": [
            { "id": "a", "text": "They can be instantiated directly" },
            { "id": "b", "text": "They must have at least one pure virtual function" },
            { "id": "c", "text": "They cannot have constructors" },
            { "id": "d", "text": "They cannot have data members" }
          ],
          "correctOptionId": "b",
          "type": "abstract_classes"
        },
        {
          "id": 38,
          "text": "What is the 'this' pointer in C++?",
          "options": [
            { "id": "a", "text": "A pointer to the base class" },
            { "id": "b", "text": "A pointer to the current object" },
            { "id": "c", "text": "A pointer to the next object" },
            { "id": "d", "text": "A pointer to static members" }
          ],
          "correctOptionId": "b",
          "type": "this_pointer"
        }
      ]
    },
    {
      "id": "section-B-operating-systems",
      "title": "Operating Systems & Networking",
      "questions": [
        {
          "id": 39,
          "text": "What is the primary function of an operating system?",
          "options": [
            { "id": "a", "text": "To run applications" },
            { "id": "b", "text": "To manage computer hardware and software resources" },
            { "id": "c", "text": "To provide internet connectivity" },
            { "id": "d", "text": "To create user interfaces" }
          ],
          "correctOptionId": "b",
          "type": "os_basics"
        },
        {
          "id": 40,
          "text": "Which scheduling algorithm is most suitable for time-sharing systems?",
          "options": [
            { "id": "a", "text": "First Come First Serve (FCFS)" },
            { "id": "b", "text": "Shortest Job First (SJF)" },
            { "id": "c", "text": "Round Robin" },
            { "id": "d", "text": "Priority Scheduling" }
          ],
          "correctOptionId": "c",
          "type": "process_scheduling"
        },
        {
          "id": 41,
          "text": "What is a deadlock in operating systems?",
          "options": [
            { "id": "a", "text": "When a process runs indefinitely" },
            { "id": "b", "text": "When two or more processes wait indefinitely for each other" },
            { "id": "c", "text": "When a process terminates unexpectedly" },
            { "id": "d", "text": "When memory is exhausted" }
          ],
          "correctOptionId": "b",
          "type": "deadlock"
        },
        {
          "id": 42,
          "text": "Which memory management technique divides memory into fixed-size blocks?",
          "options": [
            { "id": "a", "text": "Segmentation" },
            { "id": "b", "text": "Paging" },
            { "id": "c", "text": "Virtual Memory" },
            { "id": "d", "text": "Dynamic allocation" }
          ],
          "correctOptionId": "b",
          "type": "memory_management"
        },
        {
          "id": 43,
          "text": "What is the purpose of a semaphore in operating systems?",
          "options": [
            { "id": "a", "text": "To manage file systems" },
            { "id": "b", "text": "To synchronize access to shared resources" },
            { "id": "c", "text": "To schedule processes" },
            { "id": "d", "text": "To handle interrupts" }
          ],
          "correctOptionId": "b",
          "type": "synchronization"
        },
        {
          "id": 44,
          "text": "Which layer of the OSI model is responsible for routing?",
          "options": [
            { "id": "a", "text": "Physical Layer" },
            { "id": "b", "text": "Data Link Layer" },
            { "id": "c", "text": "Network Layer" },
            { "id": "d", "text": "Transport Layer" }
          ],
          "correctOptionId": "c",
          "type": "osi_model"
        },
        {
          "id": 45,
          "text": "What is the default port number for HTTP?",
          "options": [
            { "id": "a", "text": "21" },
            { "id": "b", "text": "25" },
            { "id": "c", "text": "80" },
            { "id": "d", "text": "443" }
          ],
          "correctOptionId": "c",
          "type": "networking_protocols"
        },
        {
          "id": 46,
          "text": "Which protocol is used for secure web communication?",
          "options": [
            { "id": "a", "text": "HTTP" },
            { "id": "b", "text": "HTTPS" },
            { "id": "c", "text": "FTP" },
            { "id": "d", "text": "SMTP" }
          ],
          "correctOptionId": "b",
          "type": "security_protocols"
        },
        {
          "id": 47,
          "text": "What is virtual memory?",
          "options": [
            { "id": "a", "text": "Memory that doesn't exist physically" },
            {
              "id": "b",
              "text": "A technique that allows execution of programs larger than physical memory"
            },
            { "id": "c", "text": "Memory used by virtual machines only" },
            { "id": "d", "text": "Temporary memory storage" }
          ],
          "correctOptionId": "b",
          "type": "virtual_memory"
        },
        {
          "id": 48,
          "text": "Which IP address class is used for large networks?",
          "options": [
            { "id": "a", "text": "Class A" },
            { "id": "b", "text": "Class B" },
            { "id": "c", "text": "Class C" },
            { "id": "d", "text": "Class D" }
          ],
          "correctOptionId": "a",
          "type": "ip_addressing"
        },
        {
          "id": 49,
          "text": "What is the difference between TCP and UDP?",
          "options": [
            { "id": "a", "text": "TCP is faster than UDP" },
            { "id": "b", "text": "TCP is connection-oriented, UDP is connectionless" },
            { "id": "c", "text": "UDP is more reliable than TCP" },
            { "id": "d", "text": "There is no difference" }
          ],
          "correctOptionId": "b",
          "type": "transport_protocols"
        },
        {
          "id": 50,
          "text": "Which file system is commonly used in Linux?",
          "options": [
            { "id": "a", "text": "NTFS" },
            { "id": "b", "text": "FAT32" },
            { "id": "c", "text": "ext4" },
            { "id": "d", "text": "HFS+" }
          ],
          "correctOptionId": "c",
          "type": "file_systems"
        }
      ]
    }
  ]
}
