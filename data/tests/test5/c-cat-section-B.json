{
  "id": "test5-c-cat-section-B",
  "title": "C-CAT Exam Test 5 - Section B (Hard)",
  "passingPercentage": 50,
  "correctMarks": 3,
  "incorrectMarks": 1,
  "sections": [
    {
      "id": "section-B-c-programming",
      "title": "C Programming",
      "questions": [
        {
          "id": 1,
          "text": "What will be the output of the following C code?",
          "codeSnippet": "#include <stdio.h>\nint main() {\n    int a = 5, b = 2;\n    int result = a++ + ++b * a--;\n    printf(\"%d %d %d\", a, b, result);\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "4 3 23" },
            { "id": "b", "text": "4 3 21" },
            { "id": "c", "text": "5 3 21" },
            { "id": "d", "text": "Undefined behavior" }
          ],
          "correctOptionId": "d",
          "type": "code_analysis"
        },
        {
          "id": 2,
          "text": "What is the output of this pointer arithmetic code?",
          "codeSnippet": "#include <stdio.h>\nint main() {\n    int arr[] = {10, 20, 30, 40};\n    int *p = arr + 2;\n    printf(\"%d %d\", *(p-1), *(p+1));\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "20 40" },
            { "id": "b", "text": "10 30" },
            { "id": "c", "text": "30 40" },
            { "id": "d", "text": "20 30" }
          ],
          "correctOptionId": "a",
          "type": "code_analysis"
        },
        {
          "id": 3,
          "text": "What will be printed by this recursive function?",
          "codeSnippet": "#include <stdio.h>\nvoid mystery(int n) {\n    if (n > 0) {\n        printf(\"%d \", n % 10);\n        mystery(n / 10);\n        printf(\"%d \", n % 10);\n    }\n}\nint main() {\n    mystery(123);\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "3 2 1 1 2 3" },
            { "id": "b", "text": "1 2 3 3 2 1" },
            { "id": "c", "text": "3 2 1 3 2 1" },
            { "id": "d", "text": "1 2 3 1 2 3" }
          ],
          "correctOptionId": "a",
          "type": "code_analysis"
        },
        {
          "id": 4,
          "text": "What is the output of this macro expansion?",
          "codeSnippet": "#include <stdio.h>\n#define SQUARE(x) ((x) * (x))\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\nint main() {\n    int i = 5;\n    printf(\"%d\", MAX(SQUARE(i++), 20));\n    printf(\" %d\", i);\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "25 6" },
            { "id": "b", "text": "36 7" },
            { "id": "c", "text": "25 7" },
            { "id": "d", "text": "36 8" }
          ],
          "correctOptionId": "b",
          "type": "code_analysis"
        },
        {
          "id": 5,
          "text": "What will this structure padding code output?",
          "codeSnippet": "#include <stdio.h>\nstruct Test {\n    char a;\n    int b;\n    char c;\n};\nint main() {\n    struct Test t;\n    printf(\"%lu\", sizeof(t));\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "6" },
            { "id": "b", "text": "9" },
            { "id": "c", "text": "12" },
            { "id": "d", "text": "8" }
          ],
          "correctOptionId": "c",
          "type": "code_analysis"
        },
        {
          "id": 6,
          "text": "What is the result of this union code?",
          "codeSnippet": "#include <stdio.h>\nunion Data {\n    int i;\n    float f;\n    char str[4];\n};\nint main() {\n    union Data data;\n    data.i = 0x41424344;\n    printf(\"%c\", data.str[0]);\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "A" },
            { "id": "b", "text": "B" },
            { "id": "c", "text": "D" },
            { "id": "d", "text": "Depends on endianness" }
          ],
          "correctOptionId": "d",
          "type": "code_analysis"
        },
        {
          "id": 7,
          "text": "Which statement about this function pointer code is correct?",
          "codeSnippet": "#include <stdio.h>\nint add(int a, int b) { return a + b; }\nint multiply(int a, int b) { return a * b; }\nint main() {\n    int (*operation[])(int, int) = {add, multiply};\n    printf(\"%d\", operation[1](operation[0](2, 3), 4));\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "Output is 20" },
            { "id": "b", "text": "Output is 14" },
            { "id": "c", "text": "Compilation error" },
            { "id": "d", "text": "Output is 24" }
          ],
          "correctOptionId": "a",
          "type": "code_analysis"
        },
        {
          "id": 8,
          "text": "What is the output of this bitwise operation?",
          "codeSnippet": "#include <stdio.h>\nint main() {\n    unsigned int x = 0x80000000;\n    printf(\"%d\", (int)(x >> 1));\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "1073741824" },
            { "id": "b", "text": "-1073741824" },
            { "id": "c", "text": "0x40000000" },
            { "id": "d", "text": "Implementation-defined" }
          ],
          "correctOptionId": "a",
          "type": "code_analysis"
        },
        {
          "id": 9,
          "text": "What will this dynamic memory allocation code print?",
          "codeSnippet": "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    int *p = (int*)malloc(5 * sizeof(int));\n    *(p + 2) = 100;\n    printf(\"%d\", p[2]);\n    free(p);\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "100" },
            { "id": "b", "text": "Garbage value" },
            { "id": "c", "text": "0" },
            { "id": "d", "text": "Segmentation fault" }
          ],
          "correctOptionId": "a",
          "type": "code_analysis"
        },
        {
          "id": 10,
          "text": "What is the behavior of this const pointer code?",
          "codeSnippet": "#include <stdio.h>\nint main() {\n    int a = 10, b = 20;\n    int *const ptr = &a;\n    *ptr = 15;\n    // ptr = &b;  // Line commented\n    printf(\"%d\", *ptr);\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "Prints 15, commented line would cause compilation error" },
            { "id": "b", "text": "Prints 10, commented line would work fine" },
            { "id": "c", "text": "Compilation error on *ptr = 15" },
            { "id": "d", "text": "Runtime error" }
          ],
          "correctOptionId": "a",
          "type": "code_analysis"
        }
      ]
    },
    {
      "id": "section-B-data-structures",
      "title": "Data Structures",
      "questions": [
        {
          "id": 11,
          "text": "What is the time complexity of inserting an element at the beginning of a singly linked list?",
          "options": [
            { "id": "a", "text": "O(1)" },
            { "id": "b", "text": "O(n)" },
            { "id": "c", "text": "O(log n)" },
            { "id": "d", "text": "O(nÂ²)" }
          ],
          "correctOptionId": "a",
          "type": "complexity_analysis"
        },
        {
          "id": 12,
          "text": "In a binary search tree, what is the worst-case time complexity for searching an element?",
          "options": [
            { "id": "a", "text": "O(log n)" },
            { "id": "b", "text": "O(n)" },
            { "id": "c", "text": "O(n log n)" },
            { "id": "d", "text": "O(1)" }
          ],
          "correctOptionId": "b",
          "type": "complexity_analysis"
        },
        {
          "id": 13,
          "text": "What will be the postorder traversal of this binary tree?",
          "codeSnippet": "       A\n      / \\\n     B   C\n    / \\   \\\n   D   E   F",
          "options": [
            { "id": "a", "text": "D E B F C A" },
            { "id": "b", "text": "A B D E C F" },
            { "id": "c", "text": "D B E A F C" },
            { "id": "d", "text": "A B C D E F" }
          ],
          "correctOptionId": "a",
          "type": "tree_traversal"
        },
        {
          "id": 14,
          "text": "Which data structure is most suitable for implementing recursion?",
          "options": [
            { "id": "a", "text": "Queue" },
            { "id": "b", "text": "Stack" },
            { "id": "c", "text": "Array" },
            { "id": "d", "text": "Linked List" }
          ],
          "correctOptionId": "b",
          "type": "application"
        },
        {
          "id": 15,
          "text": "What is the result of the following stack operations?",
          "codeSnippet": "Stack operations:\nPUSH(5)\nPUSH(3)\nPOP()\nPUSH(8)\nPUSH(1)\nPOP()\nPOP()",
          "options": [
            { "id": "a", "text": "Stack contains: 5" },
            { "id": "b", "text": "Stack contains: 5, 8" },
            { "id": "c", "text": "Stack contains: 3, 8" },
            { "id": "d", "text": "Stack is empty" }
          ],
          "correctOptionId": "a",
          "type": "operation_trace"
        },
        {
          "id": 16,
          "text": "In a hash table with linear probing, if the load factor is 0.75, what does this mean?",
          "options": [
            { "id": "a", "text": "75% of slots are empty" },
            { "id": "b", "text": "75% of slots are filled" },
            { "id": "c", "text": "Hash function has 75% efficiency" },
            { "id": "d", "text": "75% chance of collision" }
          ],
          "correctOptionId": "b",
          "type": "hash_tables"
        },
        {
          "id": 17,
          "text": "What is the space complexity of merge sort?",
          "options": [
            { "id": "a", "text": "O(1)" },
            { "id": "b", "text": "O(log n)" },
            { "id": "c", "text": "O(n)" },
            { "id": "d", "text": "O(n log n)" }
          ],
          "correctOptionId": "c",
          "type": "complexity_analysis"
        },
        {
          "id": 18,
          "text": "Which of the following is true about a complete binary tree?",
          "options": [
            { "id": "a", "text": "All levels are completely filled" },
            {
              "id": "b",
              "text": "All levels are completely filled except possibly the last, which is filled from left to right"
            },
            { "id": "c", "text": "Each node has exactly two children" },
            { "id": "d", "text": "Height is minimized" }
          ],
          "correctOptionId": "b",
          "type": "tree_properties"
        },
        {
          "id": 19,
          "text": "What is the minimum number of nodes in an AVL tree of height h?",
          "options": [
            { "id": "a", "text": "2^h" },
            { "id": "b", "text": "h + 1" },
            { "id": "c", "text": "Fibonacci(h+3) - 1" },
            { "id": "d", "text": "2^h - 1" }
          ],
          "correctOptionId": "c",
          "type": "tree_properties"
        },
        {
          "id": 20,
          "text": "In which case is a circular queue preferred over a linear queue?",
          "options": [
            { "id": "a", "text": "When memory is limited" },
            { "id": "b", "text": "When we need to reuse empty spaces" },
            { "id": "c", "text": "When we need faster operations" },
            { "id": "d", "text": "When we need to store strings" }
          ],
          "correctOptionId": "b",
          "type": "application"
        }
      ]
    },
    {
      "id": "section-B-oop-cpp",
      "title": "Object Oriented Programming Concepts using C++",
      "questions": [
        {
          "id": 21,
          "text": "What will be the output of this C++ inheritance code?",
          "codeSnippet": "#include <iostream>\nusing namespace std;\nclass Base {\npublic:\n    virtual void show() { cout << \"Base \"; }\n};\nclass Derived : public Base {\npublic:\n    void show() override { cout << \"Derived \"; }\n};\nint main() {\n    Base *ptr = new Derived();\n    ptr->show();\n    delete ptr;\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "Base" },
            { "id": "b", "text": "Derived" },
            { "id": "c", "text": "Compilation error" },
            { "id": "d", "text": "Runtime error" }
          ],
          "correctOptionId": "b",
          "type": "code_analysis"
        },
        {
          "id": 22,
          "text": "What is the output of this constructor/destructor sequence?",
          "codeSnippet": "#include <iostream>\nusing namespace std;\nclass A {\npublic:\n    A() { cout << \"A() \"; }\n    ~A() { cout << \"~A() \"; }\n};\nclass B : public A {\npublic:\n    B() { cout << \"B() \"; }\n    ~B() { cout << \"~B() \"; }\n};\nint main() {\n    B obj;\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "A() B() ~A() ~B()" },
            { "id": "b", "text": "B() A() ~B() ~A()" },
            { "id": "c", "text": "A() B() ~B() ~A()" },
            { "id": "d", "text": "B() A() ~A() ~B()" }
          ],
          "correctOptionId": "c",
          "type": "code_analysis"
        },
        {
          "id": 23,
          "text": "What happens with this friend function code?",
          "codeSnippet": "#include <iostream>\nusing namespace std;\nclass Rectangle {\nprivate:\n    int width, height;\npublic:\n    Rectangle(int w, int h) : width(w), height(h) {}\n    friend int area(Rectangle r);\n};\nint area(Rectangle r) {\n    return r.width * r.height;\n}\nint main() {\n    Rectangle rect(5, 3);\n    cout << area(rect);\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "15" },
            { "id": "b", "text": "Compilation error" },
            { "id": "c", "text": "0" },
            { "id": "d", "text": "Undefined behavior" }
          ],
          "correctOptionId": "a",
          "type": "code_analysis"
        },
        {
          "id": 24,
          "text": "What is the result of this operator overloading?",
          "codeSnippet": "#include <iostream>\nusing namespace std;\nclass Point {\nint x, y;\npublic:\n    Point(int a, int b) : x(a), y(b) {}\n    Point operator+(const Point& p) {\n        return Point(x + p.x, y + p.y);\n    }\n    void display() { cout << x << \",\" << y; }\n};\nint main() {\n    Point p1(2, 3);\n    Point p2(4, 5);\n    Point p3 = p1 + p2;\n    p3.display();\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "6,8" },
            { "id": "b", "text": "2,3" },
            { "id": "c", "text": "4,5" },
            { "id": "d", "text": "Compilation error" }
          ],
          "correctOptionId": "a",
          "type": "code_analysis"
        },
        {
          "id": 25,
          "text": "What will this pure virtual function code output?",
          "codeSnippet": "#include <iostream>\nusing namespace std;\nclass Shape {\npublic:\n    virtual void draw() = 0;\n    void info() { cout << \"Shape \"; }\n};\nclass Circle : public Shape {\npublic:\n    void draw() override { cout << \"Circle \"; }\n};\nint main() {\n    Circle c;\n    c.info();\n    c.draw();\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "Shape Circle" },
            { "id": "b", "text": "Circle Shape" },
            { "id": "c", "text": "Compilation error" },
            { "id": "d", "text": "Only Circle" }
          ],
          "correctOptionId": "a",
          "type": "code_analysis"
        },
        {
          "id": 26,
          "text": "Which principle of OOP does this code demonstrate?",
          "codeSnippet": "class BankAccount {\nprivate:\n    double balance;\npublic:\n    void deposit(double amount) {\n        if (amount > 0) balance += amount;\n    }\n    double getBalance() { return balance; }\n};",
          "options": [
            { "id": "a", "text": "Inheritance" },
            { "id": "b", "text": "Polymorphism" },
            { "id": "c", "text": "Encapsulation" },
            { "id": "d", "text": "Abstraction" }
          ],
          "correctOptionId": "c",
          "type": "concept_identification"
        },
        {
          "id": 27,
          "text": "What is the output of this multiple inheritance code?",
          "codeSnippet": "#include <iostream>\nusing namespace std;\nclass A {\npublic:\n    void show() { cout << \"A \"; }\n};\nclass B {\npublic:\n    void show() { cout << \"B \"; }\n};\nclass C : public A, public B {\npublic:\n    void display() { A::show(); B::show(); }\n};\nint main() {\n    C obj;\n    obj.display();\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "A B" },
            { "id": "b", "text": "B A" },
            { "id": "c", "text": "Compilation error due to ambiguity" },
            { "id": "d", "text": "Only A" }
          ],
          "correctOptionId": "a",
          "type": "code_analysis"
        },
        {
          "id": 28,
          "text": "What happens with this copy constructor code?",
          "codeSnippet": "#include <iostream>\nusing namespace std;\nclass Test {\nint *data;\npublic:\n    Test(int val) { data = new int(val); }\n    Test(const Test& obj) { data = new int(*obj.data); }\n    ~Test() { delete data; }\n    void display() { cout << *data; }\n};\nint main() {\n    Test t1(10);\n    Test t2 = t1;\n    t2.display();\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "10" },
            { "id": "b", "text": "Garbage value" },
            { "id": "c", "text": "Runtime error" },
            { "id": "d", "text": "0" }
          ],
          "correctOptionId": "a",
          "type": "code_analysis"
        },
        {
          "id": 29,
          "text": "What is the result of this template code?",
          "codeSnippet": "#include <iostream>\nusing namespace std;\ntemplate <typename T>\nT maximum(T a, T b) {\n    return (a > b) ? a : b;\n}\nint main() {\n    cout << maximum(10, 20) << \" \";\n    cout << maximum(10.5, 20.3);\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "20 20.3" },
            { "id": "b", "text": "10 10.5" },
            { "id": "c", "text": "Compilation error" },
            { "id": "d", "text": "20 20" }
          ],
          "correctOptionId": "a",
          "type": "code_analysis"
        },
        {
          "id": 30,
          "text": "What will this static member code output?",
          "codeSnippet": "#include <iostream>\nusing namespace std;\nclass Counter {\nstatic int count;\npublic:\n    Counter() { count++; }\n    static int getCount() { return count; }\n};\nint Counter::count = 0;\nint main() {\n    Counter c1, c2, c3;\n    cout << Counter::getCount();\n    return 0;\n}",
          "options": [
            { "id": "a", "text": "0" },
            { "id": "b", "text": "1" },
            { "id": "c", "text": "3" },
            { "id": "d", "text": "Compilation error" }
          ],
          "correctOptionId": "c",
          "type": "code_analysis"
        }
      ]
    },
    {
      "id": "section-B-os-networking",
      "title": "Operating Systems & Networking",
      "questions": [
        {
          "id": 31,
          "text": "What is the purpose of a semaphore in operating systems?",
          "options": [
            { "id": "a", "text": "Memory management" },
            { "id": "b", "text": "Process synchronization" },
            { "id": "c", "text": "File management" },
            { "id": "d", "text": "CPU scheduling" }
          ],
          "correctOptionId": "b",
          "type": "synchronization"
        },
        {
          "id": 32,
          "text": "In the banker's algorithm, what does the 'safe state' represent?",
          "options": [
            { "id": "a", "text": "No process is in critical section" },
            { "id": "b", "text": "All processes can complete execution without deadlock" },
            { "id": "c", "text": "System is not overloaded" },
            { "id": "d", "text": "All resources are free" }
          ],
          "correctOptionId": "b",
          "type": "deadlock_prevention"
        },
        {
          "id": 33,
          "text": "What is the time complexity of the First Fit memory allocation algorithm?",
          "options": [
            { "id": "a", "text": "O(1)" },
            { "id": "b", "text": "O(log n)" },
            { "id": "c", "text": "O(n)" },
            { "id": "d", "text": "O(nÂ²)" }
          ],
          "correctOptionId": "c",
          "type": "memory_management"
        },
        {
          "id": 34,
          "text": "In virtual memory, what happens during a page fault?",
          "options": [
            { "id": "a", "text": "Process is terminated" },
            { "id": "b", "text": "Required page is loaded from secondary storage" },
            { "id": "c", "text": "Cache is cleared" },
            { "id": "d", "text": "Page is deleted from memory" }
          ],
          "correctOptionId": "b",
          "type": "virtual_memory"
        },
        {
          "id": 35,
          "text": "Which scheduling algorithm can cause starvation?",
          "options": [
            { "id": "a", "text": "Round Robin" },
            { "id": "b", "text": "First Come First Serve" },
            { "id": "c", "text": "Shortest Job First" },
            { "id": "d", "text": "Priority Scheduling" }
          ],
          "correctOptionId": "d",
          "type": "cpu_scheduling"
        },
        {
          "id": 36,
          "text": "What is the subnet mask for a /24 network?",
          "options": [
            { "id": "a", "text": "255.255.255.0" },
            { "id": "b", "text": "255.255.0.0" },
            { "id": "c", "text": "255.0.0.0" },
            { "id": "d", "text": "255.255.255.128" }
          ],
          "correctOptionId": "a",
          "type": "networking"
        },
        {
          "id": 37,
          "text": "Which layer of the OSI model handles error detection and correction?",
          "options": [
            { "id": "a", "text": "Physical Layer" },
            { "id": "b", "text": "Data Link Layer" },
            { "id": "c", "text": "Network Layer" },
            { "id": "d", "text": "Transport Layer" }
          ],
          "correctOptionId": "b",
          "type": "networking"
        },
        {
          "id": 38,
          "text": "What is the maximum segment size in TCP for IPv4?",
          "options": [
            { "id": "a", "text": "1460 bytes" },
            { "id": "b", "text": "1500 bytes" },
            { "id": "c", "text": "65535 bytes" },
            { "id": "d", "text": "64 KB" }
          ],
          "correctOptionId": "a",
          "type": "networking"
        },
        {
          "id": 39,
          "text": "In which condition does thrashing occur in virtual memory?",
          "options": [
            { "id": "a", "text": "When there's too much free memory" },
            { "id": "b", "text": "When page fault rate is very high" },
            { "id": "c", "text": "When CPU utilization is 100%" },
            { "id": "d", "text": "When all processes are in ready state" }
          ],
          "correctOptionId": "b",
          "type": "virtual_memory"
        },
        {
          "id": 40,
          "text": "What is the purpose of ARP (Address Resolution Protocol)?",
          "options": [
            { "id": "a", "text": "Convert IP address to MAC address" },
            { "id": "b", "text": "Convert MAC address to IP address" },
            { "id": "c", "text": "Route packets between networks" },
            { "id": "d", "text": "Manage DNS queries" }
          ],
          "correctOptionId": "a",
          "type": "networking"
        }
      ]
    },
    {
      "id": "section-B-big-data-ai",
      "title": "Basics of Big Data & Artificial Intelligence",
      "questions": [
        {
          "id": 41,
          "text": "What are the 3 V's that characterize Big Data?",
          "options": [
            { "id": "a", "text": "Volume, Velocity, Variety" },
            { "id": "b", "text": "Volume, Value, Velocity" },
            { "id": "c", "text": "Variety, Value, Verification" },
            { "id": "d", "text": "Volume, Visualization, Variety" }
          ],
          "correctOptionId": "a",
          "type": "big_data_concepts"
        },
        {
          "id": 42,
          "text": "Which algorithm is commonly used for clustering in machine learning?",
          "options": [
            { "id": "a", "text": "Linear Regression" },
            { "id": "b", "text": "K-Means" },
            { "id": "c", "text": "Decision Tree" },
            { "id": "d", "text": "Support Vector Machine" }
          ],
          "correctOptionId": "b",
          "type": "machine_learning"
        },
        {
          "id": 43,
          "text": "What is the primary purpose of Hadoop's MapReduce framework?",
          "options": [
            { "id": "a", "text": "Data visualization" },
            { "id": "b", "text": "Distributed data processing" },
            { "id": "c", "text": "Data storage" },
            { "id": "d", "text": "Real-time analytics" }
          ],
          "correctOptionId": "b",
          "type": "big_data_tools"
        },
        {
          "id": 44,
          "text": "In supervised learning, what is the role of the training dataset?",
          "options": [
            { "id": "a", "text": "To test the model's accuracy" },
            { "id": "b", "text": "To teach the algorithm using labeled examples" },
            { "id": "c", "text": "To store the final results" },
            { "id": "d", "text": "To validate the model" }
          ],
          "correctOptionId": "b",
          "type": "machine_learning"
        },
        {
          "id": 45,
          "text": "What does HDFS stand for in the Hadoop ecosystem?",
          "options": [
            { "id": "a", "text": "Hadoop Data File System" },
            { "id": "b", "text": "Hadoop Distributed File System" },
            { "id": "c", "text": "High-Density File System" },
            { "id": "d", "text": "Hierarchical Data File System" }
          ],
          "correctOptionId": "b",
          "type": "big_data_tools"
        },
        {
          "id": 46,
          "text": "Which type of machine learning is used when the algorithm learns from trial and error?",
          "options": [
            { "id": "a", "text": "Supervised Learning" },
            { "id": "b", "text": "Unsupervised Learning" },
            { "id": "c", "text": "Reinforcement Learning" },
            { "id": "d", "text": "Semi-supervised Learning" }
          ],
          "correctOptionId": "c",
          "type": "machine_learning"
        },
        {
          "id": 47,
          "text": "What is the main advantage of using Apache Spark over traditional MapReduce?",
          "options": [
            { "id": "a", "text": "Better security" },
            { "id": "b", "text": "In-memory processing for faster computation" },
            { "id": "c", "text": "Smaller storage requirements" },
            { "id": "d", "text": "Simpler installation" }
          ],
          "correctOptionId": "b",
          "type": "big_data_tools"
        },
        {
          "id": 48,
          "text": "In neural networks, what is the function of the activation function?",
          "options": [
            { "id": "a", "text": "To initialize weights" },
            { "id": "b", "text": "To introduce non-linearity" },
            { "id": "c", "text": "To store training data" },
            { "id": "d", "text": "To calculate error rates" }
          ],
          "correctOptionId": "b",
          "type": "artificial_intelligence"
        },
        {
          "id": 49,
          "text": "What is the primary goal of data preprocessing in machine learning?",
          "options": [
            { "id": "a", "text": "To increase data size" },
            { "id": "b", "text": "To clean and prepare data for training" },
            { "id": "c", "text": "To visualize data patterns" },
            { "id": "d", "text": "To store data permanently" }
          ],
          "correctOptionId": "b",
          "type": "machine_learning"
        },
        {
          "id": 50,
          "text": "Which statement best describes artificial intelligence?",
          "options": [
            { "id": "a", "text": "Only computer programs that can think like humans" },
            {
              "id": "b",
              "text": "Systems that can perform tasks typically requiring human intelligence"
            },
            { "id": "c", "text": "Only robots with human-like appearance" },
            { "id": "d", "text": "Programs that can only play games" }
          ],
          "correctOptionId": "b",
          "type": "artificial_intelligence"
        }
      ]
    }
  ]
}
